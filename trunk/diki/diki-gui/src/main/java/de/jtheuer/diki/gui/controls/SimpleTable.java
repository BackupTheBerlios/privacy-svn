/**
 *     This file is part of Diki.
 *
 *     Copyright (C) 2009 jtheuer
 *     Please refer to the documentation for a complete list of contributors
 *
 *     Diki is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Diki is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Diki.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
    (c) by Jan Torben Heuer <jan.heuer@uni-muenster.de

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/
 */
package de.jtheuer.diki.gui.controls;
import java.awt.*;
import java.util.Vector;
import java.util.logging.Logger;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.*;

import de.jtheuer.diki.gui.utils.SimpleTagTableModel;

/**
 * 
 */
public class SimpleTable extends JTable {
	/* autogenerated Logger */@SuppressWarnings("unused")
	private final static Logger LOGGER = Logger.getLogger(SimpleTable.class.getName());
	private Vector<String> tags;

	/**
	 * @param dm
	 */
	public SimpleTable(SimpleTagTableModel dm, Vector<String> tags) {
		super(dm);
		setTableHeader(null);
		this.tags = tags;
		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		setPreferredScrollableViewportSize(new Dimension(100,150));
	}

	@Override
	public TableCellEditor getCellEditor(int row, int column) {
		return TagCellEditor.createDefaultEditor(tags);
	}

	@Override
	public TableCellRenderer getCellRenderer(int row, int column) {
		return new DefaultTableCellRenderer() {

			private static final long serialVersionUID = -3456544010126025791L;

			@Override
			protected void setValue(Object value) {
				if (value instanceof String) {
					String tag = (String) value;
					setText(tag);
				} else if (value == null) {
					setFont(getFont().deriveFont(Font.ITALIC));
					setForeground(Color.DARK_GRAY);
					setText("new Tag...");
				} else {
					throw new AssertionError("Only String should be displayed!");
				}
			}
		};
	}
	
	
	
	
}
