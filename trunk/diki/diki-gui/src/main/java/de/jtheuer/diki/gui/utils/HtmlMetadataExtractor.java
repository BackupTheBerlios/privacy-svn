/**
 *     This file is part of Diki.
 *
 *     Copyright (C) 2009 jtheuer
 *     Please refer to the documentation for a complete list of contributors
 *
 *     Diki is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Diki is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Diki.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.jtheuer.diki.gui.utils;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.text.JTextComponent;

import org.ccil.cowan.tagsoup.Parser;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

/**
 * @author Jan Torben Heuer <jan.heuer@uni-muenster.de>
 * 
 */
public class HtmlMetadataExtractor {
	/* automatically generated Logger */@SuppressWarnings("unused")
	private static final Logger LOGGER = Logger.getLogger(HtmlMetadataExtractor.class.getName());

	protected static final String TITLE = "title";
	protected static final String META = "meta";
	protected static final String DESCRIPTION_ATTRIBUTE = "description";
	protected static final String CONTENT_ATTRIBUTE = "content";
	
	/**
	 * HTML Parser flags
	 */
	protected enum ParserModus {
		UNDEF,TITLE,DESCRIPTION;
	}

	protected String description;
	protected String title;
	
	private Semaphore semaphore = new Semaphore(1);
	private JTextComponent titlefield;
	private JTextComponent descriptionfield;


	protected HtmlMetadataExtractor() {
		
	}

	/**
	 * 
	 */
	public HtmlMetadataExtractor(final URL url, JTextComponent titlefield, JTextComponent descriptionfield) {
		this.titlefield = titlefield;
		this.descriptionfield = descriptionfield;

		/* read document */
		new Thread() {
			@Override
			public void run() {
				try {

					/* Block getTitle and getDescription */
					semaphore.acquireUninterruptibly();

					startMatching(new InputStreamReader(url.openStream()));
					
					/* release semaphores for getTitle and getDescription methods */
					semaphore.release();
					
				} catch (IOException e) {
					LOGGER.log(Level.WARNING,"cannot open stream for url: " + url.toString());
				}
			}

		}.start();
	}

	/**
	 * Called asynchronously by the constructor: Reads the title and description information from the 
	 * supplied html page
	 * @param reader the html page reader
	 */
	protected void startMatching(Reader reader) {

		try {
			/* create new parser and add a default content handler */
			Parser parser = new Parser();
			parser.setContentHandler(new DefaultHandler() {
				
				ParserModus parserModus = ParserModus.UNDEF;

				@Override
				public void startElement(String uri, String localName, String name, Attributes attributes) throws SAXException {
					if(localName.equalsIgnoreCase(TITLE)) {
						parserModus = ParserModus.TITLE;
					} else if(localName.equalsIgnoreCase(META)) {
						if(DESCRIPTION_ATTRIBUTE.equalsIgnoreCase(attributes.getValue("", "name"))) {
							description = attributes.getValue("",CONTENT_ATTRIBUTE);
						}
					}
				}

				@Override
				public void characters(char[] ch, int start, int length) throws SAXException {
					if(parserModus == ParserModus.TITLE) {
						title = new String(ch,start,length);
						title = title.replaceAll("\\s", " ");
						title = title.trim();
						parserModus = ParserModus.UNDEF;
					}
				}
				
			});
			
			/* start parsing (blocks) and assign results */
			parser.parse(new InputSource(reader));
			if (titlefield != null) {
				titlefield.setText(title);
			}
			if (descriptionfield != null) {
				descriptionfield.setText(description);
			}
		} catch (IOException e) {
			LOGGER.log(Level.SEVERE, "autogenerated catch-block", e);
		} catch (SAXException e) {
			LOGGER.log(Level.SEVERE,"autogenerated catch-block", e);
		}
	}
	

	/**
	 * Matches the title if available in the given input string
	 * 
	 * @param input
	 * @return
	 */
	static String matchTitle(String input) {
		Pattern titlePattern = Pattern.compile("\\<title\\>\\s*(..*)\\s*\\<\\/");
		Matcher titleMatcher = titlePattern.matcher(input);
		if (titleMatcher.find()) {
			String raw_title = titleMatcher.group(1);
			Pattern rawPattern = Pattern.compile("\\s");
			Matcher rawMatcher = rawPattern.matcher(raw_title); 
			String title = rawMatcher.replaceAll(" ");
			return title;
		} else {
			return null;
		}
	}

	/**
	 * Blocks until the Title is available
	 * 
	 * @return the title or null
	 */
	public String getTitle() {
		try {
			semaphore.acquireUninterruptibly();
			return title;
		} finally {
			semaphore.release();
		}
	}

	/**
	 * Adds a new instance of a {@link HtmlMetadataExtractor} as the urlfield's {@link JTextComponent#addFocusListener(FocusListener)} event handler.
	 * This is a convenience method
	 * @param urlfield
	 * @param titlefield
	 * @param descriptionfield
	 */
	public static void addFocusLostEventListener(final JTextComponent urlfield, final JTextComponent titlefield, final JTextComponent descriptionfield) {
		urlfield.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent e) {}

			@Override
			public void focusLost(FocusEvent e) {
				URL url;
				try {
					url = new URL(urlfield.getText());
					new HtmlMetadataExtractor(url, titlefield, descriptionfield);
				} catch (MalformedURLException e1) {
					LOGGER.log(Level.FINE, e1.getMessage());
				}

			}
		});
	}

	/**
	 * The description from the meta tag if available. Blocks until html document is parsed
	 * @return
	 */
	public String getDescription() {
		try {
			semaphore.acquireUninterruptibly();
			return description;
		} finally {
			semaphore.release();
		}
	}
}
