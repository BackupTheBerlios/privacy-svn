/**
 *     This file is part of Diki.
 *
 *     Copyright (C) 2009 jtheuer
 *     Please refer to the documentation for a complete list of contributors
 *
 *     Diki is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Diki is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Diki.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.jtheuer.diki.lib.connectors.gate;

import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import de.jtheuer.diki.lib.NetworkConnection;
import de.jtheuer.diki.lib.query.*;
import de.jtheuer.sesame.QNameURI;

/**
 * @author Jan Torben Heuer <jan.heuer@uni-muenster.de>
 * 
 */
public abstract class AbstractGateQueryResultListener extends AbstractQueryResult<String> implements QueryResultListener<String> {
	/* automatically generated Logger */@SuppressWarnings("unused")
	private static final Logger LOGGER = Logger.getLogger(AbstractGateQueryResultListener.class.getName());
	private Set<QNameURI> querySet;
	private NetworkConnection connection;
	private GateQuery query;

	/**
	 * @param connection
	 * @param querySet
	 *            a set of queries that should be ignored because they have
	 *            already been processed
	 */
	public AbstractGateQueryResultListener(NetworkConnection connection, Set<QNameURI> querySet) {
		this.querySet = querySet;
		this.connection = connection;
	}

	protected void processIncommingMessage(String message, QNameURI from) {
		QNameURI queryID;

		LOGGER.info("Incomming message from: " + from);

		try {
			query = new GateQuery(connection, this,from);
			if(query.setQuery(message)) {
				queryID = query.getQueryID();
				if (querySet.contains(queryID)) {
					LOGGER.info("already solved the query from: " + from + "id: " + queryID);

					// TODO: send other than END in future?
					fireResultFinished();
				} else {
					/* everything fine, forward query! */
					querySet.add(queryID);
					connection.getQueryFactory().forwardQueries(query);
				}
			} else {
				LOGGER.log(Level.FINE, "Message from " + from + "didn't contain a query: " + message);
			}

			
		} catch (QueryException e) {
			LOGGER.log(Level.WARNING,"unable to parse query from :" + from.toString() + ": " + message , e);
		}

	}

	/**
	 * @see de.jtheuer.diki.lib.query.result.AbstractQueryResult#fireResultFinished()
	 * 
	 * closes the query by sending the end documents. If you overwrite this
	 * method make sure to call the super-method!
	 */
	@Override
	public void fireResultFinished() {
		try {
			send(query.createEnd());
			query.close();
		} catch (QueryException e) {
			LOGGER.log(Level.SEVERE,"autogenerated catch-block", e);
		}
	}
	
	/* (non-Javadoc)
	 * @see de.jtheuer.diki.lib.query.QueryResultListener#fireNewResults(java.lang.Object)
	 */
	@Override
	public void fireNewResults(String response) {
		send(response);
	}


	protected abstract void send(String message);
}
