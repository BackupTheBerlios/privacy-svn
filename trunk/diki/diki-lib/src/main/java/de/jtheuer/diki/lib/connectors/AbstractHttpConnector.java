/**
 *     This file is part of Diki.
 *
 *     Copyright (C) 2009 jtheuer
 *     Please refer to the documentation for a complete list of contributors
 *
 *     Diki is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Diki is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Diki.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.jtheuer.diki.lib.connectors;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.logging.Logger;

import javax.imageio.ImageIO;

import de.jtheuer.diki.lib.NetworkConnection;


/**
 * @author Jan Torben Heuer <jan.heuer@uni-muenster.de>
 *
 */
public abstract class AbstractHttpConnector  extends AbstractSimpleConnector {
	/* autogenerated Logger */@SuppressWarnings("unused")
	final static Logger LOGGER = Logger.getLogger(AbstractHttpConnector.class.getName());
	private String url;
	
	/**
	 * Default instantiation
	 */
	public AbstractHttpConnector(NetworkConnection connection) {
		super(connection);
	}
	
	/**
	 * Default instantiation
	 */
	public AbstractHttpConnector(String name, String faviconurl,NetworkConnection connection) {
		super(name, null, connection);
		this.url = faviconurl;
	}
	


	/* (non-Javadoc)
	 * @see de.jtheuer.diki.lib.connectors.Connector#getIcon()
	 */
	@Override
	public Image getIcon() {
		return getFavicon(url);
	}

	/**
	 * Tries to get the favicon image of the supplied url
	 * @param url
	 * @return
	 */
	protected static Image getFavicon(String url) {
		try {
			BufferedImage image = ImageIO.read(new URL(url));
			return image;
		} catch (Exception e) {
			LOGGER.fine("Cannot read " + url + ": " + e.getMessage());
			return null;
		}
	}
}