/**
 *     This file is part of Diki.
 *
 *     Copyright (C) 2009 jtheuer
 *     Please refer to the documentation for a complete list of contributors
 *
 *     Diki is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Diki is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Diki.  If not, see <http://www.gnu.org/licenses/>.
 */
	
package de.jtheuer.diki.lib;
import java.util.Iterator;
import java.util.concurrent.Exchanger;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.xml.namespace.QName;

import junit.framework.TestCase;

import org.openrdf.concepts.foaf.Agent;
import org.openrdf.elmo.ElmoManager;
import org.openrdf.elmo.ElmoModule;
import org.openrdf.elmo.sesame.SesameManagerFactory;
import org.openrdf.repository.Repository;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.sail.memory.MemoryStore;

/**
 * @author Jan Torben Heuer <jan.heuer@uni-muenster.de>
 *
 */
public class DeadlockDetectionTest extends TestCase {
	/* automatically generated Logger */@SuppressWarnings("unused")
	private static final Logger LOGGER = Logger.getLogger(DeadlockDetectionTest.class.getName());
	private SesameManagerFactory factory;
	private static QName agent1 = new QName("http://example.com/","agent1");

	/**
	 * @param name
	 */
	public DeadlockDetectionTest(String name) {
		super(name);
	}

	/* (non-Javadoc)
	 * @see junit.framework.TestCase#setUp()
	 */
	protected void setUp() throws Exception {
		ElmoModule module = new ElmoModule();
		MemoryStore store = new MemoryStore();

		Repository repository = new SailRepository(store);
		repository.initialize();

		factory = new SesameManagerFactory(module, repository);
		
		ElmoManager manager = factory.createElmoManager();
		manager.designate(Agent.class, agent1);
	}
	
	public void testDeadlock() throws InterruptedException {
		
		/* the string itself is only for commenting the action! */
		final Exchanger<String> barrier = new Exchanger<String>();
		
		Thread write = new Thread() {
			@Override
			public void run() {
				ElmoManager manager = factory.createElmoManager();
				try {
					barrier.exchange("waiting for query to be ready");
					manager.designate(Agent.class, agent1);
					barrier.exchange("agent created");
				} catch (InterruptedException e) {
					LOGGER.log(Level.SEVERE,"autogenerated catch-block", e);
				}
				
			}
		};
		
		Thread read = new Thread() {
			@Override
			public void run() {
				ElmoManager manager = factory.createElmoManager();
				
				try {
					Iterable<Agent> result = manager.findAll(Agent.class); //test sparql
					Iterator<Agent> iterator = result.iterator();
					barrier.exchange("query ready");
					barrier.exchange("waiting for agent");
					System.out.println(iterator.next());
					
				} catch (InterruptedException e) {
					LOGGER.log(Level.SEVERE,"autogenerated catch-block", e);
				}

				
			}
		};
		
		write.start();
		read.start();
		
		write.join();
		read.join();
		
	}

	
	
}
